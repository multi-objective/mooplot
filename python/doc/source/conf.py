"""mooplot documentation build configuration file."""

# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import sys
import warnings
from datetime import date
from intersphinx_registry import get_intersphinx_mapping

from docutils import nodes
from sphinx.addnodes import pending_xref
from sphinx.application import Sphinx
from sphinx.environment import BuildEnvironment
from sphinx.ext.intersphinx import missing_reference

import mooplot

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "sphinxext"))

# General information about the project.
project = "mooplot"
# Can we get this from pyproject.toml ?
author = "Manuel López-Ibáñez and Fergus Rooney"
copyright = f"2014-{date.today().year}, {author}"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = mooplot.__version__
# The full version, including alpha/beta/rc tags.
release = mooplot.__version__ + "-git"

# -- General configuration ------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx_design",  # grid directive
    "sphinx.ext.autodoc",  # Core Sphinx library for auto html doc generation from docstrings
    "sphinx.ext.extlinks",
    "sphinx.ext.napoleon",
    "sphinx_autodoc_typehints",
    "sphinx.ext.viewcode",  # Add a link to the Python source code for classes, functions etc.
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",  # Link to other project's documentation (see mapping below)
    #    "sphinx_copybutton",  # A small sphinx extension to add a "copy" button to code blocks.
    "sphinx.ext.mathjax",
    "sphinxcontrib.bibtex",
    "sphinx_gallery.gen_gallery",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# https://sphinx-copybutton.readthedocs.io/en/latest/use.html
# copybutton_exclude = ".linenos, .gp, .go"
# copybutton_only_copy_prompt_lines = True
# copybutton_remove_prompts = True
# copybutton_copy_empty_lines = False

# -----------------------------------------------------------------------------
# Autosummary
# -----------------------------------------------------------------------------
# generate autosummary even if no references
autosummary_generate = True
# autosummary_generate_overwrite = False
# autosummary_ignore_module_all = False
# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True
# autosummary_imported_members = True  # Also documents imports in __init__.py
# Napoleon settings
napoleon_google_docstring = False
napoleon_numpy_docstring = True
napoleon_preprocess_types = True
napoleon_use_rtype = False
napoleon_include_init_with_doc = True
napoleon_use_param = True
napoleon_type_aliases = {
    "numpy.typing.ArrayLike": ":py:data:`~numpy.typing.ArrayLike`",
    "ArrayLike": ":py:data:`~numpy.typing.ArrayLike`",
}

bibtex_bibfiles = ["REFERENCES.bib"]
bibtex_reference_style = "super"
bibtex_default_style = "unsrt"

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

autodoc_typehints = "none"  # Conflicts with sphinx_autodoc_typehints
typehints_document_rtype = True
typehints_use_rtype = False
typehints_defaults = "comma"
always_use_bars_union = True
autodoc_type_aliases = {
    "ArrayLike": ":py:data:`~numpy.typing.ArrayLike`",
}


# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "_build",
    "sphinxext",
    "Thumbs.db",
    ".DS_Store",
    "**.ipynb_checkpoints",
    "_templates",
    "modules.rst",
    "source",
    # Exclude .py and .ipynb files in auto_examples generated by sphinx-gallery.
    # This is to prevent sphinx from complaining about duplicate source files.
    "auto_examples/*.ipynb",
    "auto_examples/*.py",
]

# See warnings about bad links
nitpicky = True
nitpick_ignore = [("", "Pygments lexer name 'ipython' is not known")]

# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"
highlight_language = "python3"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

# The theme is set by the make target
html_theme = "pydata_sphinx_theme"


def fix_reference(
    app: Sphinx,
    env: BuildEnvironment,
    node: pending_xref,
    contnode: nodes.TextElement,
) -> nodes.reference | None:
    """Fix some intersphinx references that are broken."""
    if node["refdomain"] == "py":
        if node["reftarget"] == "plotly.graph_objs._figure.Figure":
            node["reftarget"] = "plotly.graph_objects.Figure"
            return missing_reference(app, env, node, contnode)

    return None


def setup(app: Sphinx) -> None:
    """Sphinx setup function."""
    app.add_css_file("theme_override.css")
    app.add_css_file("hide_links.css")
    app.add_object_type(
        "confval",
        "confval",
        objname="configuration value",
        indextemplate="pair: %s; configuration value",
    )
    app.connect("missing-reference", fix_reference)


# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    "use_edit_page_button": True,
    "navbar_center": ["navbar-nav"],
    "show_toc_level": 2,
    "show_nav_level": 2,
    "navbar_end": ["theme-switcher", "version-switcher", "navbar-icon-links"],
    "navigation_with_keys": False,
    # "logo": {
    #     "text": "mooplot",
    # },
    "switcher": dict(
        json_url="https://multi-objective.github.io/mooplot/python/_static/switcher.json",
        version_match="dev" if "dev" in version else "stable",
    ),
    "github_url": f"https://github.com/multi-objective/{project}",
    "icon_links": [
        {
            "name": "PyPI",
            "url": "https://pypi.org/project/" + project,
            "icon": "fa-solid fa-box",
        },
    ],
    "secondary_sidebar_items": [
        "page-toc",
        "sg_download_links",
        "sg_launcher_links",
    ],
}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = None


# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]


# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
    "reference": [],
}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = "mooplotdoc"

html_context = {
    "display_github": True,
    "github_user": "multi-objective",
    "github_repo": project,
    "github_version": "main",
    "doc_path": "python/doc/source",
}


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        "index",
        project + ".tex",
        project + " Documentation",
        author,
        "manual",
    ),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (
        "index",
        project,
        project + " Documentation",
        [author],
        1,
    )
]

# If true, show URL addresses after external links.
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        "index",
        project,
        project + " Documentation",
        author,
        project,
        "Visualizations for multi-objective optimization.",
        "Miscellaneous",
    ),
]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
# Intersphinx mapping
intersphinx_mapping = get_intersphinx_mapping(
    packages={
        "matplotlib",
        "numpy",
        "pandas",
        "python",
        "plotly",
        "scipy",
    },
)
intersphinx_mapping.update(
    {
        "moocore": ("https://multi-objective.github.io/moocore/python/", None),
        # "neps": ("https://numpy.org/neps/", None),
        # "nx-guides": ("https://networkx.org/nx-guides/", None),
    }
)


image_scrapers = ("matplotlib",)
try:
    # Run the PyVista examples and find the PyVista figures if PyVista is
    # installed
    import pyvista
except Exception:  # can raise all sorts of errors
    pyvista = None
else:
    image_scrapers += ("pyvista",)

# Set plotly renderer to capture _repr_html_ for sphinx-gallery
try:
    import plotly
    import plotly.io
except ImportError:
    plotly = None

min_reported_time = 0
if "SOURCE_DATE_EPOCH" in os.environ:
    min_reported_time = sys.maxsize


sphinx_gallery_conf = {
    "backreferences_dir": "reference/generated/backreferences",
    # Modules for which function/class level galleries are created.
    "doc_module": (project, "numpy"),
    "reference_url": {project: None},
    "examples_dirs": ["../../examples"],
    "gallery_dirs": ["auto_examples"],
    "image_scrapers": image_scrapers,
    "reset_modules": ("matplotlib", "seaborn", "sg_doc_build.reset_others"),
    "compress_images": ("images", "thumbnails"),
    # specify the order of examples to be according to filename
    "within_subsection_order": "FileNameSortKey",
    "min_reported_time": min_reported_time,
    "jupyterlite": {
        "notebook_modification_function": "sg_doc_build.notebook_modification_function",
    },
    "show_memory": True,
    "promote_jupyter_magic": False,
    # capture raw HTML or, if not present, __repr__ of last expression in
    # each code block
    "capture_repr": ("_repr_html_", "__repr__"),
    "matplotlib_animations": True,
    "image_srcset": ["2x"],
    "nested_sections": True,
    "show_api_usage": False,
    "show_signature": False,  # Show "Gallery generated by"
    # avoid generating too many cross links
    "inspect_global_variables": False,
    "remove_config_comments": True,
}

# Remove matplotlib agg warnings from generated doc when using plt.show
warnings.filterwarnings(
    "ignore",
    category=UserWarning,
    message="Matplotlib is currently using agg, which is a"
    " non-GUI backend, so cannot show the figure.",
)
